/*


*/
	-- A Report That Shows All Key Metrics of The Business

SELECT 'Total Sales' as measure_name, ROUND(SUM(usd_price), 2) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Orders' as measure_name, COUNT(DISTINCT id) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Average Sales/Price' as measure_name, ROUND(AVG(usd_price),2) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Product Category' as measure_name, COUNT(DISTINCT product_name) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Products' as measure_name, COUNT(product_id) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Customers ' as measure_name, COUNT( DISTINCT customer_id) AS measure_value FROM Elist_tech_cleaned.dbo.orders


/* For detailed Data Exploratory Analysis please see.*/


-- Explore All Countries

SELECT DISTINCT country FROM elist_tech_cleaned.dbo.geo_lookup

-- DATE EXPLORATION
	-- The scope of data and the timespan

SELECT MIN(purchase_ts) first_order_date, 
MAX(purchase_ts) last_order_date,
DATEDIFF(year,MIN(purchase_ts), MAX(purchase_ts)) AS order_range_years,
DATEDIFF(month,MIN(purchase_ts), MAX(purchase_ts)) AS order_range_months
FROM Elist_tech_cleaned.dbo.order_status

	-- How many days it took to ship, delivery ?

SELECT purchase_ts,
ship_ts,
delivery_ts,
refund_ts,
DATEDIFF(DAY, purchase_ts,ship_ts) AS days_to_ship,
DATEDIFF(DAY, purchase_ts,delivery_ts) AS days_to_delivery
FROM Elist_tech_cleaned.dbo.order_status

	-- How many years/months of sales are available ?

SELECT MIN(purchase_ts) first_order_date,
MAX(purchase_ts) last_order_date,
DATEDIFF(year,MIN(purchase_ts), MAX(purchase_ts)) AS order_range_years,
DATEDIFF(month,MIN(purchase_ts), MAX(purchase_ts)) AS order_range_months
FROM Elist_tech_cleaned.dbo.orders


-- MEASURES EXPLORATION 
	-- The key metrics of the business
	-- Total Sales, 
	-- Total Number of Products
	-- Avg Sales
	-- Total Orders

SELECT 
SUM(usd_price) AS total_sales,
AVG(usd_price) AS avg_sales, 
COUNT(DISTINCT id) AS total_orders
FROM Elist_tech_cleaned.dbo.orders

	-- Total number of products

SELECT COUNT( DISTINCT product_id) AS total_product,
COUNT(DISTINCT product_name) AS product_category
FROM Elist_tech_cleaned.dbo.orders

	-- Total customers

SELECT COUNT( DISTINCT id) AS total_customer
FROM Elist_tech_cleaned.dbo.customers

	-- The total number of customers that has placed an order

SELECT COUNT( DISTINCT customer_id) AS total_customer
FROM Elist_tech_cleaned.dbo.orders

-- MAGNITUDE ANALYSIS

	-- Total Customers by Country & Region

SELECT 
c.country_code, region,
COUNT(DISTINCT id) AS total_customer 
FROM Elist_tech_cleaned.dbo.customers c
LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup geo
ON c.country_code = geo.country
GROUP BY c.country_code, region
ORDER BY total_customer DESC

	-- Total Products by Category

SELECT 
product_name,
COUNT(product_id) AS total_products  --?OR DISTINCT
FROM Elist_tech_cleaned.dbo.orders
GROUP BY product_name
ORDER BY total_products DESC

	-- Average sales in each Category

SELECT 
product_name,
ROUND(AVG(usd_price), 2)  AS avg_sales
FROM Elist_tech_cleaned.dbo.orders
GROUP BY product_name
ORDER BY avg_sales DESC

	-- What is the total revenue generated for each category ?

SELECT 
product_name,
SUM(usd_price) AS total_revenue
FROM Elist_tech_cleaned.dbo.orders
GROUP BY product_name
ORDER BY total_revenue DESC

	-- What is the total revenue generated by each customer ?

SELECT 
o.customer_id,
SUM(usd_price) AS total_revenue
FROM Elist_tech_cleaned.dbo.orders o
LEFT JOIN Elist_tech_cleaned.dbo.customers c
ON o.customer_id = c.id
GROUP BY o.customer_id
ORDER BY total_revenue DESC

	-- What is the distribution of sold items across countries?

SELECT 
c.country_code,
COUNT(o.id) AS total_sold_items
FROM Elist_tech_cleaned.dbo.orders o
LEFT JOIN Elist_tech_cleaned.dbo.customers c
ON o.customer_id = c.id
GROUP BY c.country_code
ORDER BY total_sold_items DESC

-- RANKING ANALYSIS 
	-- Top 5 products
	-- Bottom 10 Customers by Total Orders
	-- Which 5 products generate the highest revenue?

SELECT *
FROM (
SELECT
product_name,
SUM(usd_price) AS total_revenue,
ROW_NUMBER() OVER (ORDER BY SUM(usd_price) DESC) AS rank_products
FROM Elist_tech_cleaned.dbo.orders
GROUP BY product_name) t
WHERE rank_products <= 5

	-- What are the 5 worst performing products in terms of sales?

SELECT TOP 5
product_name,
SUM(usd_price) AS total_revenue
FROM Elist_tech_cleaned.dbo.orders
GROUP BY product_name
ORDER BY total_revenue 

	-- The top 10 customers who have generated the highest revenue

SELECT * FROM
(
SELECT 
customer_id,
COUNT(DISTINCT id) AS total_orders,
SUM(usd_price) AS total_revenue,
ROW_NUMBER() OVER (ORDER BY SUM(usd_price) DESC) AS rank_products
FROM Elist_tech_cleaned.dbo.orders
GROUP BY customer_id)t
WHERE rank_products <= 10

	-- The 10 customers with the fewest orders placed

SELECT TOP 10
customer_id,
COUNT(DISTINCT id) AS total_orders
FROM Elist_tech_cleaned.dbo.orders
GROUP BY customer_id
ORDER BY total_orders


SELECT 'Revenue' as measure_name, SUM(usd_price) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Order Volume' as measure_name, COUNT(DISTINCT id) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Average Order Value' as measure_name, AVG(usd_price) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Product Line' as measure_name, COUNT(DISTINCT product_name) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Products' as measure_name, COUNT( product_id) AS measure_value FROM Elist_tech_cleaned.dbo.orders
UNION ALL
SELECT 'Total Nr. Customers ' as measure_name, COUNT(DISTINCT customer_id) AS measure_value FROM Elist_tech_cleaned.dbo.orders

-- Overall Trends: What are the overall trends in sales?
-- What are the seasonal trends in sales? Do we observe recurring peaks or drops by month/year?


SELECT
YEAR(purchase_ts) AS order_year,
SUM(usd_price) AS revenue,
COUNT(DISTINCT id) AS order_volume,
AVG(usd_price) AS avg_order_value
FROM Elist_tech_cleaned.dbo.orders
WHERE purchase_ts IS NOT NULL
GROUP BY YEAR(purchase_ts)
ORDER BY YEAR(purchase_ts)

SELECT
DATENAME(MONTH, purchase_ts) AS month_name,
DATETRUNC(month, purchase_ts) AS order_date,
ROUND(SUM(usd_price),2) AS revenue,
COUNT(DISTINCT id) AS total_orders,
AVG(usd_price) AS avg_order_value
FROM Elist_tech_cleaned.dbo.orders
WHERE purchase_ts IS NOT NULL
GROUP BY DATENAME(MONTH, purchase_ts), DATETRUNC(month, purchase_ts)
ORDER BY SUM(usd_price) DESC

-- Highest Share of sales in December 2020? Which product contribute the most? Which region?

SELECT
o.product_name,
g.region,
DATENAME(MONTH, o.purchase_ts) AS month_name,
DATETRUNC(month, o.purchase_ts) AS order_date,
ROUND(SUM(o.usd_price),2) AS revenue,
COUNT(DISTINCT o.id) AS order_volume,
AVG(o.usd_price) AS avg_order_value
FROM Elist_tech_cleaned.dbo.orders o
LEFT JOIN Elist_tech_cleaned.dbo.customers c
ON c.customer_id = o.customer_id
LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup g
ON g.country=c.country_code
WHERE purchase_ts = '2020-12-01' 
GROUP BY o.product_name, g.region, g.region, DATENAME(MONTH, o.purchase_ts), DATETRUNC(month, o.purchase_ts)
ORDER BY o.product_name, SUM(o.usd_price) DESC


-- How do trends vary by region?

SELECT
--g.region,
DATETRUNC(month, o.purchase_ts) AS order_date,
SUM(o.usd_price) AS revenue,
COUNT(DISTINCT id) AS order_volume,
AVG(o.usd_price) AS avg_order_value
FROM Elist_tech_cleaned.dbo.orders o
LEFT JOIN Elist_tech_cleaned.dbo.customers c
ON c.customer_id = o.customer_id
LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup g
ON g.country=c.country_code
WHERE o.purchase_ts IS NOT NULL AND region = 'NA'
GROUP BY g.region, DATETRUNC(month, o.purchase_ts)
ORDER BY g.region, DATETRUNC(month, o.purchase_ts)



-- Is our business growing or declining?

SELECT
order_date,
revenue,
SUM(revenue) OVER(ORDER BY order_date) AS running_total_revenue,
AVG(avg_order_value) OVER (ORDER BY order_date) AS moving_average_order_value
FROM 
(
SELECT
DATETRUNC(year, purchase_ts) AS order_date,
SUM(usd_price) AS revenue,
AVG(usd_price) AS avg_order_value
FROM Elist_tech_cleaned.dbo.orders
WHERE DATETRUNC(year, purchase_ts) IS NOT NULL
GROUP BY DATETRUNC(year, purchase_ts)
)t

-- Growth Rates: What were our monthly and yearly growth rates?
-- Are there spesific months or seasons where growth rates were consistently high/low?
-- Which months had the highest/lowest growth? What was the average monthly change ?

WITH monthly_sales_growth_rate AS 
(
	SELECT
	DATENAME(MONTH, purchase_ts) AS month_name,
	DATETRUNC(month, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders
	WHERE purchase_ts IS NOT NULL
	GROUP BY DATETRUNC(month, purchase_ts),  DATENAME(MONTH, purchase_ts)
) ,growth_calculations AS(
SELECT
	order_date,
	month_name,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	AVG(current_revenue) OVER (ORDER BY order_date) AS avg_revenue,
	current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) AS diff_avg,
	CASE WHEN current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) > 0 THEN 'Above Avg'
		 WHEN current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) < 0 THEN 'Below Avg'
		 ELSE 'Avg'
	END AS avg_change,
	LAG(current_revenue) OVER (ORDER BY order_date) AS previous_month_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)),2) AS revenue_growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS revenue_growth_rate_percentage_change
FROM monthly_sales_growth_rate
--ORDER BY order_date
)
,highest_growth AS (
SELECT TOP 1
	order_date,
	ov_growth_rate_percentage,
	aov_growth_rate_percentage,
	revenue_growth_rate_percentage
FROM growth_calculations
WHERE revenue_growth_rate_percentage IS NOT NULL
ORDER BY revenue_growth_rate_percentage DESC

)
,lowest_growth AS (
SELECT TOP 1
	order_date,
	ov_growth_rate_percentage,
	aov_growth_rate_percentage,
	revenue_growth_rate_percentage
FROM growth_calculations
WHERE ov_growth_rate_percentage IS NOT NULL
ORDER BY revenue_growth_rate_percentage
)
SELECT
	hg.order_date AS highest_growth_month,
	hg.ov_growth_rate_percentage AS highest_ov_growth,
	hg.aov_growth_rate_percentage AS highest_aov_growth,
	hg.revenue_growth_rate_percentage AS highest_revenue_growth,
	lg.order_date AS  lowest_growth_month,
	lg.ov_growth_rate_percentage AS lowest_ov_growth,
	lg.aov_growth_rate_percentage AS lowest_aov_growth,
	lg.revenue_growth_rate_percentage AS lowest_revenue_growth
FROM highest_growth hg
CROSS JOIN lowest_growth lg



WITH yearly_sales_growth_rate AS 
(
	SELECT
	DATENAME(YEAR, purchase_ts) AS Year,
	DATETRUNC(YEAR, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders
	WHERE purchase_ts IS NOT NULL
	GROUP BY DATENAME(YEAR, purchase_ts), DATETRUNC(YEAR, purchase_ts)
) 
SELECT
	Year,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (ORDER BY order_date))*100.0 / LAG(order_volume) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	AVG(current_revenue) OVER (ORDER BY order_date) AS avg_revenue,
	current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) AS diff_avg,
	CASE WHEN current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) > 0 THEN 'Above Avg'
		 WHEN current_revenue - AVG(current_revenue) OVER (ORDER BY order_date) < 0 THEN 'Below Avg'
		 ELSE 'Avg'
	END AS avg_change,
	LAG(current_revenue) OVER (ORDER BY order_date) AS previous_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)),2) AS revenue_growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS revenue_growth_rate_percentage_change
FROM yearly_sales_growth_rate
ORDER BY order_date

-- What were the monthly growth rates sliced by product, by region, ?

WITH product_monthly_growth_rate AS 
(
	SELECT
	product_name,
	DATENAME(MONTH, purchase_ts) AS month_name,
	DATETRUNC(month, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders
	WHERE purchase_ts IS NOT NULL
	GROUP BY product_name, DATETRUNC(month, purchase_ts), DATENAME(MONTH, purchase_ts)
) 
SELECT
	product_name,
	order_date,
	month_name,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY product_name ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY product_name ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date) AS previous_month_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date)),2) AS growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY product_name ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS growth_rate_percentage_change
FROM product_monthly_growth_rate
--WHERE product_name = '27in 4K gaming monitor'
ORDER BY product_name, order_date


WITH region_monthly_growth_rate AS 
(
	SELECT
	g.region,
	DATENAME(MONTH, purchase_ts) AS month_name,
	DATETRUNC(month, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup g
	ON g.country = c.country_code
	WHERE purchase_ts IS NOT NULL
	GROUP BY g.region, DATETRUNC(month, purchase_ts), DATENAME(MONTH, purchase_ts)
) 
SELECT
	--region,
	order_date,
	month_name,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY region ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY region ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date) AS previous_month_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date)),2) AS growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY region ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS revenue_growth_rate_percentage_change
FROM region_monthly_growth_rate
WHERE region = 'NA' 
ORDER BY order_date


WITH loyalty_monthly_growth_rate AS 
(
	SELECT
	c.loyalty_program,
	DATENAME(MONTH, purchase_ts) AS month_name,
	DATETRUNC(month, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	WHERE purchase_ts IS NOT NULL
	GROUP BY c.loyalty_program, DATETRUNC(month, purchase_ts), DATENAME(MONTH, purchase_ts)
) 
SELECT
	loyalty_program,
	order_date,
	month_name,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date) AS previous_month_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS growth_rate_percentage_change
FROM loyalty_monthly_growth_rate
--WHERE loyalty_program = 1
ORDER BY loyalty_program, order_date

-- What were yearly growth rates by loyalty program?

WITH loyalty_yearly_growth_rate AS 
(
	SELECT
	c.loyalty_program,
	DATETRUNC(year, purchase_ts) AS order_date,
	ROUND(SUM(usd_price),2) AS current_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	WHERE purchase_ts IS NOT NULL
	GROUP BY c.loyalty_program, DATETRUNC(year, purchase_ts)
) 
SELECT
	loyalty_program,
	order_date,
	order_volume,
	LAG(order_volume) OVER (ORDER BY order_date) AS previous_month_order_volume,
	ROUND(((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS ov_growth_rate_percentage,
	CASE WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((order_volume - LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(order_volume) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS order_volume_growth_rate_percent_change,
	avg_order_value,
	LAG(avg_order_value) OVER (ORDER BY order_date) AS previous_month_aov,
	ROUND(((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS aov_growth_rate_percentage,
	CASE WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((avg_order_value - LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(avg_order_value) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS aov_growth_rate_percent_change,
	current_revenue,
	LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date) AS previous_month_revenue,
	ROUND(((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)),2) AS growth_rate_percentage,
	CASE WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)) > 0 THEN 'Growing'
		 WHEN ((current_revenue - LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date))*100.0 / LAG(current_revenue) OVER (PARTITION BY loyalty_program ORDER BY order_date)) < 0 THEN 'Declining'
		 ELSE 'No Change'
	END AS growth_rate_percentage_change
FROM loyalty_yearly_growth_rate
ORDER BY loyalty_program, order_date


-- Performance Measures: How is the new loyalty program performing? Should we keep using it?
--Customer Report


WITH customer_agg AS (
	SELECT
	c.loyalty_program,
	o.customer_id,
	COUNT(o.id) AS order_count,
	SUM(o.usd_price) AS total_spent,
	AVG(o.usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders o
	JOIN Elist_tech_cleaned.dbo.customers c 
	ON o.customer_id = c.customer_id
	WHERE o.purchase_ts IS NOT NULL
	GROUP BY c.loyalty_program, o.customer_id
)
SELECT
  loyalty_program,
  COUNT(customer_id) AS total_customers,
  AVG(order_count) AS avg_orders_per_customer,   -- Average orders per customer
  SUM(total_spent) AS total_revenue,
  AVG(avg_order_value) AS overall_avg_order_value,
  SUM(CASE WHEN order_count > 1 THEN 1 ELSE 0 END) AS repeat_customers,
  ROUND(100.0 * SUM(CASE WHEN order_count > 1 THEN 1 ELSE 0 END) / COUNT(customer_id), 2) AS repeat_purchase_rate,  -- % of customers with more than one order
  AVG(total_spent) AS avg_spent_per_customer                  -- Average customer lifetime value
FROM customer_agg
GROUP BY loyalty_program;

-- Seasonality: Are loyalty members more active during specific season or promotional periods?

SELECT
c.loyalty_program,
DATETRUNC(month, o.purchase_ts) AS order_date,
COUNT(o.id) AS order_volume,
SUM(o.usd_price) AS revenue,
AVG(o.usd_price) AS avg_order_value,
COUNT(o.customer_id) AS total_customers
FROM Elist_tech_cleaned.dbo.orders o
JOIN Elist_tech_cleaned.dbo.customers c 
ON o.customer_id = c.customer_id
WHERE o.purchase_ts IS NOT NULL
GROUP BY DATETRUNC(month, o.purchase_ts), c.loyalty_program
ORDER BY DATETRUNC(month, o.purchase_ts)

-- Do loyalty members show different purchasing patterns, such as higher cross-sell or upsell rates?

WITH order_basket AS (
	SELECT 
	o.id,
	c.loyalty_program,
	COUNT(DISTINCT o.product_id) AS distinct_products,
	SUM(o.usd_price) AS order_total
	FROM Elist_tech_cleaned.dbo.orders o
	JOIN Elist_tech_cleaned.dbo.customers c 
	ON o.customer_id = c.customer_id
	WHERE o.purchase_ts IS NOT NULL
	GROUP BY o.id, c.loyalty_program
)
SELECT 
  loyalty_program,
  AVG(distinct_products) AS avg_distinct_products,
  AVG(order_total) AS avg_order_total
FROM order_basket
GROUP BY loyalty_program

-- How do loyalty members perform in terms of total revenue, AOV, and order volume compared to non-members? What percentage of overall revenue is contributed by loyalty members? What are their return rate?


WITH loyalty_performance AS (
	SELECT
	c.loyalty_program,
	SUM(usd_price) AS total_revenue,
	COUNT(o.id) AS order_volume,
	AVG(usd_price) AS avg_order_value,
	COUNT(DISTINCT c.customer_id) AS total_customers,
	SUM(CASE WHEN s.refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS total_returns,
	SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS returns_revenue,
	SUM(usd_price) - SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS net_revenue
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.order_status s
	ON s.order_id = o.id
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	GROUP BY loyalty_program)

SELECT
	loyalty_program,
	total_revenue,
	order_volume,
	avg_order_value,
	ROUND(SUM(total_revenue) OVER(),2) AS overall_sales,
	CONCAT(ROUND((total_revenue / SUM(total_revenue) OVER())*100, 2), '%') AS percentage_of_total_revenue,
	total_returns,
	returns_revenue,
	CONCAT(ROUND((CAST(total_returns AS FLOAT)/order_volume)*100,2), '%') AS return_rate_percentage,
	net_revenue,
	CONCAT(ROUND(net_revenue * 100.0 / SUM(net_revenue) OVER (), 2), '%') AS net_revenue_percentage
FROM loyalty_performance
ORDER BY total_revenue DESC

-- Who are the returning customers by loyalty programs?

SELECT 
    o.customer_id,
    c.loyalty_program,
    COUNT(o.id) AS total_orders,
    SUM(o.usd_price) AS total_spent,
    ROUND(AVG(o.usd_price),2) AS aov
FROM Elist_tech_cleaned.dbo.orders o
JOIN Elist_tech_cleaned.dbo.customers c 
ON o.customer_id = c.customer_id
GROUP BY o.customer_id, c.loyalty_program
HAVING COUNT(o.id) > 1
ORDER BY ROUND(AVG(o.usd_price),2) DESC;

-- Customer Retention: What is the repeat purchase rate among loyalty members compared to non-members?

WITH customer_retention AS (
	SELECT
	c.loyalty_program,
	o.customer_id,
	COUNT(o.id) AS order_count,
	SUM(o.usd_price) AS total_spent,
	AVG(o.usd_price) AS avg_order_value
	FROM Elist_tech_cleaned.dbo.orders o
	JOIN Elist_tech_cleaned.dbo.customers c 
	ON o.customer_id = c.customer_id
	WHERE o.purchase_ts IS NOT NULL
	GROUP BY c.loyalty_program, o.customer_id
)
SELECT
	loyalty_program,
	COUNT(customer_id) AS total_customers,
	AVG(order_count) AS avg_orders_per_customer,   -- Average orders per customer
	SUM(total_spent) AS total_revenue,
	AVG(avg_order_value) AS overall_avg_order_value,
	SUM(CASE WHEN order_count > 1 THEN 1 ELSE 0 END) AS repeat_customers,
	ROUND(100.0 * SUM(CASE WHEN order_count > 1 THEN 1 ELSE 0 END) / COUNT(customer_id), 2) AS repeat_purchase_rate,  -- % of customers with more than one order
	AVG(total_spent) AS avg_spent_per_customer                  -- Average customer lifetime value
FROM customer_retention
GROUP BY loyalty_program;

-- Product Level Performance Analysis : Which products are performing best in terms of sales, and returns?

-- Do some products perform better in spesific months or seasons?

WITH product_level_performance AS(
	SELECT
	o.product_name,
	DATETRUNC(month, o.purchase_ts) AS order_date,
	SUM(o.usd_price) AS revenue,
	COUNT(o.id) AS order_volume,
	AVG(o.usd_price) AS avg_order_value,
	SUM(CASE WHEN s.refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS total_returns
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.order_status s
	ON s.order_id = o.id
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup g
	ON g.country = c.country_code
	WHERE o.purchase_ts IS NOT NULL
	GROUP BY o.product_name, DATETRUNC(month, o.purchase_ts))
--ORDER BY o.product_name, DATETRUNC(month, o.purchase_ts)

SELECT 
	product_name,
	order_date,
	revenue,
	order_volume,
	avg_order_value,
	total_returns,
	ROUND((CAST(total_returns AS FLOAT)/order_volume)*100,2) AS return_rate_percentage
FROM product_level_performance
--WHERE order_date IS NOT NULL AND product_name = 'Macbook Air Laptop' 
ORDER BY product_name, order_date


-- How do product sales fluctuate over time (year-over-year)?

WITH yearly_product_sales AS (
	SELECT
	YEAR(purchase_ts) AS order_date,
	product_name,
	SUM(usd_price) AS current_revenue
	FROM Elist_tech_cleaned.dbo.orders
	WHERE YEAR(purchase_ts) IS NOT NULL
	GROUP BY YEAR(purchase_ts), product_name)

SELECT 
	order_date,
	product_name,
	current_revenue,
	AVG(current_revenue) OVER(PARTITION BY product_name) AS avg_revenue,
	current_revenue - AVG(current_revenue) OVER(PARTITION BY product_name) AS diff_avg,
	CASE WHEN current_revenue - AVG(current_revenue) OVER(PARTITION BY product_name) < 0 THEN 'Below Avg'
		 WHEN current_revenue - AVG(current_revenue) OVER(PARTITION BY product_name) > 0 THEN 'Above Avg'
		 ELSE 'Avg'
	END avg_change,
	LAG(current_revenue) OVER(PARTITION BY product_name ORDER BY order_date) AS previous_revenue,
	current_revenue - LAG(current_revenue) OVER(PARTITION BY product_name ORDER BY order_date) AS diff_ps,
	CASE WHEN current_revenue - LAG(current_revenue) OVER(PARTITION BY product_name ORDER BY order_date) < 0 THEN 'Decreasing'
		 WHEN current_revenue - LAG(current_revenue) OVER(PARTITION BY product_name ORDER BY order_date) > 0 THEN 'Increasing'
		 ELSE 'No Change'
	END previous_year_change
FROM yearly_product_sales
--WHERE product_name = '27in 4K gaming monitor'
ORDER BY product_name, order_date


-- Which products generate the most revenue, orders, and returns? What are their AOVs?
-- What is the revenue, number of orders, and return count for each product line ? What is the average AOV per product line?
-- Which product lines account for the highest % of revenue and returns? Are returns concentrated in a few product lines?

WITH product_performance AS (
	SELECT
	product_name,
	SUM(usd_price) AS total_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value,
	SUM(CASE WHEN s.refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS total_returns,
	SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS returns_revenue,
	SUM(usd_price) - SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS net_revenue
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.order_status s
	ON s.order_id = o.id
	GROUP BY product_name)

SELECT
	product_name,
	total_revenue,
	order_volume,
	avg_order_value,
	ROUND(SUM(total_revenue) OVER(),2) AS overall_sales,
	CONCAT(ROUND((total_revenue / SUM(total_revenue) OVER())*100, 2), '%') AS percentage_of_total_revenue,
	total_returns,
	returns_revenue,
	CONCAT(ROUND((CAST(total_returns AS FLOAT)/order_volume)*100,2), '%') AS return_rate_percentage,
	net_revenue,
	CONCAT(ROUND(net_revenue * 100.0 / SUM(net_revenue) OVER (), 2), '%') AS net_revenue_percentage
FROM product_performance
ORDER BY total_revenue DESC

-- How do sales and return rates vary across product lines by regions?    , and customer segments(loyal/non-loyal)?

WITH product_performance AS (
	SELECT
	product_name,
	g.region,
	SUM(usd_price) AS total_revenue,
	COUNT(DISTINCT id) AS order_volume,
	AVG(usd_price) AS avg_order_value,
	SUM(CASE WHEN s.refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS total_returns,
	SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS returns_revenue,
	SUM(usd_price) - SUM(CASE WHEN refund_ts IS NOT NULL THEN usd_price ELSE 0 END) AS net_revenue
	FROM Elist_tech_cleaned.dbo.orders o
	LEFT JOIN Elist_tech_cleaned.dbo.order_status s
	ON s.order_id = o.id
	LEFT JOIN Elist_tech_cleaned.dbo.customers c
	ON c.customer_id = o.customer_id
	LEFT JOIN Elist_tech_cleaned.dbo.geo_lookup g
	ON g.country = c.country_code
	GROUP BY product_name, g.region)

SELECT
	product_name,
	region,
	total_revenue,
	order_volume,
	avg_order_value,
	total_returns,
	returns_revenue,
	CONCAT(ROUND((CAST(total_returns AS FLOAT)/order_volume)*100,2), '%') AS return_rate_percentage,
	net_revenue
FROM product_performance
WHERE region = 'NA' AND product_name = '27in 4K gaming monitor'
ORDER BY total_revenue DESC
